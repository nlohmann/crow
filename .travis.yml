#########################
# project configuration #
#########################

# C++ project
language: cpp

dist: trusty
sudo: required
group: edge

################
# build matrix #
################

matrix:
  include:

  # OSX / Clang

  - os: osx
    osx_image: xcode6.4

  - os: osx
    osx_image: xcode7.3

  - os: osx
    osx_image: xcode8

  - os: osx
    osx_image: xcode8.1

  - os: osx
    osx_image: xcode8.2

  - os: osx
    osx_image: xcode8.3

  - os: osx
    osx_image: xcode9

  - os: osx
    osx_image: xcode9.1

  - os: osx
    osx_image: xcode9.2

  - os: osx
    osx_image: xcode9.3

  # Linux / GCC

  - os: linux
    compiler: gcc
    env:
      - COMPILER=g++-4.9
      - CCOMPILER=gcc-4.9
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test']
        packages: ['g++-4.9', 'ninja-build']

  - os: linux
    compiler: gcc
    env:
      - COMPILER=g++-5
      - CCOMPILER=gcc-5
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test']
        packages: ['g++-5', 'ninja-build']

  - os: linux
    compiler: gcc
    env:
      - COMPILER=g++-6
      - CCOMPILER=gcc-6
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test']
        packages: ['g++-6', 'ninja-build']

  - os: linux
    compiler: gcc
    env:
      - COMPILER=g++-7
      - CCOMPILER=gcc-7
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test']
        packages: ['g++-7', 'ninja-build']

  - os: linux
    compiler: gcc
    env:
      - COMPILER=g++-7
      - CCOMPILER=gcc-7
      - CXXFLAGS=-std=c++17
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test']
        packages: ['g++-7', 'ninja-build']

  # Linux / Clang

  - os: linux
    compiler: clang
    env:
      - COMPILER=clang++-3.5
      - CCOMPILER=clang-3.5
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-precise-3.5']
        packages: ['g++-6', 'clang-3.5', 'ninja-build']

  - os: linux
    compiler: clang
    env:
      - COMPILER=clang++-3.6
      - CCOMPILER=clang-3.6
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-precise-3.6']
        packages: ['g++-6', 'clang-3.6', 'ninja-build']

  - os: linux
    compiler: clang
    env:
      - COMPILER=clang++-3.7
      - CCOMPILER=clang-3.7
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-precise-3.7']
        packages: ['g++-6', 'clang-3.7', 'ninja-build']

  - os: linux
    compiler: clang
    env:
      - COMPILER=clang++-3.8
      - CCOMPILER=clang-3.8
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test']
        packages: ['g++-6', 'clang-3.8', 'ninja-build']

  - os: linux
    compiler: clang
    env:
      - COMPILER=clang++-3.9
      - CCOMPILER=clang-3.9
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test']
        packages: ['g++-6', 'clang-3.9', 'ninja-build']

  - os: linux
    compiler: clang
    env:
      - COMPILER=clang++-4.0
      - CCOMPILER=clang-4.0
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-trusty-4.0']
        packages: ['g++-6', 'clang-4.0', 'ninja-build']

  - os: linux
    compiler: clang
    env:
      - COMPILER=clang++-5.0
      - CCOMPILER=clang-5.0
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-trusty-5.0']
        packages: ['g++-6', 'clang-5.0', 'ninja-build']

  - os: linux
    compiler: clang
    env:
      - COMPILER=clang++-5.0
      - CCOMPILER=clang-5.0
      - CXXFLAGS=-std=c++1z
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-trusty-5.0']
        packages: ['g++-6', 'clang-5.0', 'ninja-build']

################
# build script #
################

script:
  # get CMake and Ninja (only for systems with brew - macOS)
  - |
     if [[ (-x $(which brew)) ]]; then
       brew update
       brew install cmake ninja
       brew upgrade cmake
       cmake --version
     else
       wget -O cmake.sh https://cmake.org/files/v3.10/cmake-3.10.0-rc1-Linux-x86_64.sh
       mkdir -p /tmp/cmake
       sudo sh cmake.sh --skip-license --exclude-subdir --prefix=/tmp/cmake
       export PATH=/tmp/cmake/bin:$PATH
     fi

  # make sure CXX is correctly set
  - if [[ "${COMPILER}" != "" ]]; then export CXX=${COMPILER}; export CC=${CCOMPILER}; fi

  # show OS/compiler version
  - uname -a
  - $CC --version
  - $CXX --version

  # compile and execute unit tests
  - mkdir -p build && cd build
  - cmake .. -GNinja && cmake --build . --config Release
  - ctest -C Release -V -j
  - cd ..
